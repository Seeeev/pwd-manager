generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status {
  pending
  approved
  rejected
}

model Announcement {
  id        Int       @id @default(autoincrement())
  title     String?
  body      String?
  createdAt DateTime? @default(now())
}

model Pwd {
  pwdNumber                   String            @id
  firstName                   String
  middleName                  String?
  lastName                    String?
  suffix                      String?
  streetName                  String?
  landline                    String?
  mobileNumber                String
  emailAddress                String?
  birthDate                   DateTime
  gender                      String
  civilStatus                 String
  educationalAttainment       String?
  employmentStatus            String?
  affiliatedPerson            String?
  affiliatedAddress           String?
  affiliatedContactNumber     String?
  sssNumber                   String?
  gsisNumber                  String?
  psnNumber                   String?
  philhealthNumber            String?
  isPhilhealthMember          Boolean?
  isPhilhealthMemberDependent Boolean?
  fathersFirstName            String?
  fathersMiddleName           String?
  fathersLastName             String?
  mothersFirstName            String?
  mothersMiddleName           String?
  mothersLastName             String?
  accomplishedBy              String
  isApplicant                 Boolean?
  isGuardian                  Boolean?
  isRepresentative            Boolean?
  createdAt                   DateTime          @default(now())
  disability                  Disability[]
  disabilityCause             DisabilityCause[]
  bloodType                   String
  barangay     Barangay?   @relation(fields: [barangayId], references: [id])
  barangayId   Int?
  status       Status?     @default(pending)
  occupation   Occupation? @relation(fields: [occupationId], references: [id])
  occupationId Int?
  isApparent Boolean?
  imageUrls  ImageUrls[]
}

model ImageUrls {
  id  Int    @id @default(autoincrement())
  url String

  Pwd          Pwd?    @relation(fields: [pwdPwdNumber], references: [pwdNumber])
  pwdPwdNumber String?
}

model Barangay {
  id   Int    @id @default(autoincrement())
  name String
  pwd  Pwd[]
  User User[]
}

model Disability {
  id   Int    @id @default(autoincrement())
  name String
  pwd  Pwd[]
}

model DisabilityCause {
  id   Int    @id @default(autoincrement())
  name String
  pwd  Pwd[]
}

model Occupation {
  id   Int    @id @default(autoincrement())
  name String
  pwd  Pwd[]
}

// FOR AUTHENTICATION
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  admin
  barangay
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String
  emailVerified DateTime?
  image         String?
  role          Role      @default(barangay)
  accounts      Account[]
  sessions      Session[]
  barangay      Barangay? @relation(fields: [barangayId], references: [id])
  barangayId    Int?
}
